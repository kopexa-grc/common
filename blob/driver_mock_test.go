// Code generated by MockGen. DO NOT EDIT.
// Source: ./driver/driver.go
//
// Generated by this command:
//
//	mockgen -destination=./driver_mock_test.go -package=blob_test -source=./driver/driver.go Bucket
//

// Package blob_test is a generated GoMock package.
package blob_test

import (
	context "context"
	reflect "reflect"

	driver "github.com/kopexa-grc/common/blob/driver"
	gomock "go.uber.org/mock/gomock"
)

// MockBucket is a mock of Bucket interface.
type MockBucket struct {
	ctrl     *gomock.Controller
	recorder *MockBucketMockRecorder
	isgomock struct{}
}

// MockBucketMockRecorder is the mock recorder for MockBucket.
type MockBucketMockRecorder struct {
	mock *MockBucket
}

// NewMockBucket creates a new mock instance.
func NewMockBucket(ctrl *gomock.Controller) *MockBucket {
	mock := &MockBucket{ctrl: ctrl}
	mock.recorder = &MockBucketMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBucket) EXPECT() *MockBucketMockRecorder {
	return m.recorder
}

// Copy mocks base method.
func (m *MockBucket) Copy(ctx context.Context, srcKey, dstKey string, opts *driver.CopyOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Copy", ctx, srcKey, dstKey, opts)
	ret0, _ := ret[0].(error)
	return ret0
}

// Copy indicates an expected call of Copy.
func (mr *MockBucketMockRecorder) Copy(ctx, srcKey, dstKey, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Copy", reflect.TypeOf((*MockBucket)(nil).Copy), ctx, srcKey, dstKey, opts)
}

// Delete mocks base method.
func (m *MockBucket) Delete(ctx context.Context, key string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, key)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockBucketMockRecorder) Delete(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockBucket)(nil).Delete), ctx, key)
}

// SignedURL mocks base method.
func (m *MockBucket) SignedURL(ctx context.Context, key string, opts *driver.SignedURLOptions) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignedURL", ctx, key, opts)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignedURL indicates an expected call of SignedURL.
func (mr *MockBucketMockRecorder) SignedURL(ctx, key, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignedURL", reflect.TypeOf((*MockBucket)(nil).SignedURL), ctx, key, opts)
}
