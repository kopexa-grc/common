// Code generated by MockGen. DO NOT EDIT.
// Source: ./service.go
//
// Generated by this command:
//
//	mockgen -destination=./store_mock_test.go -package=azurestore_test -source=./service.go AzService,AzBlob
//

// Package azurestore_test is a generated GoMock package.
package azurestore_test

import (
	context "context"
	reflect "reflect"

	blob "github.com/Azure/azure-sdk-for-go/sdk/storage/azblob/blob"
	azurestore "github.com/kopexa-grc/common/blob/azurestore"
	driver "github.com/kopexa-grc/common/blob/driver"
	gomock "go.uber.org/mock/gomock"
)

// MockAzBlob is a mock of AzBlob interface.
type MockAzBlob struct {
	ctrl     *gomock.Controller
	recorder *MockAzBlobMockRecorder
	isgomock struct{}
}

// MockAzBlobMockRecorder is the mock recorder for MockAzBlob.
type MockAzBlobMockRecorder struct {
	mock *MockAzBlob
}

// NewMockAzBlob creates a new mock instance.
func NewMockAzBlob(ctrl *gomock.Controller) *MockAzBlob {
	mock := &MockAzBlob{ctrl: ctrl}
	mock.recorder = &MockAzBlobMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAzBlob) EXPECT() *MockAzBlobMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockAzBlob) Delete(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockAzBlobMockRecorder) Delete(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockAzBlob)(nil).Delete), ctx)
}

// GetProperties mocks base method.
func (m *MockAzBlob) GetProperties(ctx context.Context, o *blob.GetPropertiesOptions) (blob.GetPropertiesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProperties", ctx, o)
	ret0, _ := ret[0].(blob.GetPropertiesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProperties indicates an expected call of GetProperties.
func (mr *MockAzBlobMockRecorder) GetProperties(ctx, o any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProperties", reflect.TypeOf((*MockAzBlob)(nil).GetProperties), ctx, o)
}

// SignedURL mocks base method.
func (m *MockAzBlob) SignedURL(ctx context.Context, opts *driver.SignedURLOptions) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignedURL", ctx, opts)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignedURL indicates an expected call of SignedURL.
func (mr *MockAzBlobMockRecorder) SignedURL(ctx, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignedURL", reflect.TypeOf((*MockAzBlob)(nil).SignedURL), ctx, opts)
}

// StartCopyFromURL mocks base method.
func (m *MockAzBlob) StartCopyFromURL(ctx context.Context, url string, opts *driver.CopyOptions) (blob.StartCopyFromURLResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartCopyFromURL", ctx, url, opts)
	ret0, _ := ret[0].(blob.StartCopyFromURLResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartCopyFromURL indicates an expected call of StartCopyFromURL.
func (mr *MockAzBlobMockRecorder) StartCopyFromURL(ctx, url, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartCopyFromURL", reflect.TypeOf((*MockAzBlob)(nil).StartCopyFromURL), ctx, url, opts)
}

// URL mocks base method.
func (m *MockAzBlob) URL() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "URL")
	ret0, _ := ret[0].(string)
	return ret0
}

// URL indicates an expected call of URL.
func (mr *MockAzBlobMockRecorder) URL() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "URL", reflect.TypeOf((*MockAzBlob)(nil).URL))
}

// MockAzService is a mock of AzService interface.
type MockAzService struct {
	ctrl     *gomock.Controller
	recorder *MockAzServiceMockRecorder
	isgomock struct{}
}

// MockAzServiceMockRecorder is the mock recorder for MockAzService.
type MockAzServiceMockRecorder struct {
	mock *MockAzService
}

// NewMockAzService creates a new mock instance.
func NewMockAzService(ctrl *gomock.Controller) *MockAzService {
	mock := &MockAzService{ctrl: ctrl}
	mock.recorder = &MockAzServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAzService) EXPECT() *MockAzServiceMockRecorder {
	return m.recorder
}

// NewBlob mocks base method.
func (m *MockAzService) NewBlob(ctx context.Context, name string) (azurestore.AzBlob, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewBlob", ctx, name)
	ret0, _ := ret[0].(azurestore.AzBlob)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewBlob indicates an expected call of NewBlob.
func (mr *MockAzServiceMockRecorder) NewBlob(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewBlob", reflect.TypeOf((*MockAzService)(nil).NewBlob), ctx, name)
}
